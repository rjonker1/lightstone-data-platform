<#@ template language="C#" debug="false" hostspecific="true"#>
<#@ include file="EF6.Utility.CS.ttinclude"#><#@
 output extension=".cg.cs"#><#

string serviceLayer = "AppService"; /* AppService or WcfService ??? */
const string inputFile = @"..\..\Domain.PackageBuilderModule.Entities\Model\Model1.edmx";

var textTransform = DynamicTextTransformation.Create(this);
var code = new CodeGenerationTools(this);
var ef = new MetadataTools(this);
var typeMapper = new TypeMapper(code, ef, textTransform.Errors);
var	fileManager = EntityFrameworkTemplateFileManager.Create(this);
var itemCollection = new EdmMetadataLoader(textTransform.Host, textTransform.Errors).CreateEdmItemCollection(inputFile);
var codeStringGenerator = new CodeStringGenerator(code, typeMapper, ef);

if (!typeMapper.VerifyCaseInsensitiveTypeUniqueness(typeMapper.GetAllGlobalItems(itemCollection), inputFile))
{
    return string.Empty;
}

//WriteHeader(codeStringGenerator, fileManager);

foreach (var entity in typeMapper.GetItemsToGenerate<EntityType>(itemCollection)) {
	var wrapProperty = string.Format("{0}", entity.Name);
	var simpleProperties = typeMapper.GetSimpleProperties(entity);
	var propertyPk = simpleProperties.FirstOrDefault(p => ef.IsKey(p));
	var nPropertyColFk = typeMapper.GetNavigationProperties(entity).Where(np => ((AssociationType) np.RelationshipType).IsForeignKey && ((AssociationType) np.RelationshipType).ReferentialConstraints.SingleOrDefault() != null && ((AssociationType) np.RelationshipType).ReferentialConstraints.Single().ToProperties.Count == 1).Distinct(new NpNamesFkComparer());

    fileManager.StartNewFile(entity.Name + "Controller.cg.cs");
    BeginNamespace(code, entity, nPropertyColFk, serviceLayer);
#>
<#=codeStringGenerator.UsingDirectives(inHeader: false)#>
<#=codeStringGenerator.EntityClassOpening(entity)#>Controller : ControllerBase
{
	#region Fields
        
    private readonly I<#=entity.Name#><#=serviceLayer#> _service<#=entity.Name#>;
<#
var services = new StringBuilder(string.Format("I{0}{1} service", entity.Name, serviceLayer));
var servicesNames = new StringBuilder();
servicesNames.Append(string.Format("_service{0}", entity.Name));
foreach (var nPropertyTypeName in nPropertyColFk) {
services.Append(string.Format(", I{0}{1} service{0}", nPropertyTypeName, serviceLayer));
servicesNames.Append(string.Format(", _service{0}", nPropertyTypeName));
#>
	private readonly I<#=nPropertyTypeName#><#=serviceLayer#> _service<#=nPropertyTypeName#>;
<#
}
#>

    #endregion

	#region Constructor

    /// <summary>
    /// Create a new instance of <#=entity.Name#> controller
    /// </summary>
    /// <param name="service">Service dependency</param>
<#
foreach (var nPropertyTypeName in nPropertyColFk) {
#>
	/// <param name="service<#=nPropertyTypeName#>">Service dependency</param>
<#
}
#>
    public <#=entity.Name#>Controller(<#=services.ToString()#>)
    {
        if (service == null)
            throw new ArgumentNullException("service", PresentationResources.exception_WithoutService);
<#
foreach (var nPropertyTypeName in nPropertyColFk) {
#>
		if (service<#=nPropertyTypeName#> == null)
            throw new ArgumentNullException("service<#=nPropertyTypeName#>", PresentationResources.exception_WithoutService);
<#
}
#>

        _service<#=entity.Name#> = service;
<#
foreach (var nPropertyTypeName in nPropertyColFk) {
#>
        _service<#=nPropertyTypeName#> = service<#=nPropertyTypeName#>;
<#
}
#>
    }

	#endregion

	// GET
    public ActionResult Add()
    {
        LoggerFactory.CreateLog().Debug(string.Format(CultureInfo.InvariantCulture, "Presentation Layer - Add<#=entity.Name#> Controller Begin"));
			
		try
        {
            // Add add logic here
			var model = new <#=entity.Name#>CrudViewModel(<#=servicesNames.ToString()#>);

			LoggerFactory.CreateLog().Debug(string.Format(CultureInfo.InvariantCulture, "Presentation Layer - Add<#=entity.Name#> Controller End"));              
			return View("<#=entity.Name#>AddView", model);
        }
        catch (Exception ex)
        {
			LoggerFactory.CreateLog().Error(string.Format(CultureInfo.InvariantCulture, "Presentation Layer - Add<#=entity.Name#> Controller ERROR"), ex);         
		}

		return RedirectToAction("Index", "Home");
    }

	// POST
	[HttpPost]
	[ValidateAntiForgeryToken]
    public ActionResult Add(<#=entity.Name#>CrudViewModel model)
    {
        LoggerFactory.CreateLog().Debug(string.Format(CultureInfo.InvariantCulture, "Presentation Layer - Add<#=entity.Name#> Controller Begin"));	

		try
        {
            // Add add logic here
			if (ModelState.IsValid)
            {
				var committed = _service<#=entity.Name#>.Add(model.<#=wrapProperty#>, null);
				if (committed)
				{
					LoggerFactory.CreateLog().Debug(string.Format(CultureInfo.InvariantCulture, "Presentation Layer - Add<#=entity.Name#> Controller End"));              
					return RedirectToAction("Add");
				}
			}
        }
        catch (Exception ex)
        {
			LoggerFactory.CreateLog().Error(string.Format(CultureInfo.InvariantCulture, "Presentation Layer - Add<#=entity.Name#> Controller ERROR"), ex);
		}

		ModelState.AddModelError("", PresentationResources.Error);
		return View("<#=entity.Name#>AddView", new <#=entity.Name#>CrudViewModel(<#=servicesNames.ToString()#>));
    }

	// GET
    public ActionResult Modify(int id)
    {
		LoggerFactory.CreateLog().Debug(string.Format(CultureInfo.InvariantCulture, "Presentation Layer - Modify<#=entity.Name#> Controller Begin"));		
			
		try
        {
            // Add modify logic here
			var model = new <#=entity.Name#>CrudViewModel(<#=servicesNames.ToString()#>)
				{
				    <#=entity.Name#> = _service<#=entity.Name#>.Get(new List<object> { id }, null)
				};
				
			LoggerFactory.CreateLog().Debug(string.Format(CultureInfo.InvariantCulture, "Presentation Layer - Modify<#=entity.Name#> Controller End"));
			return View("<#=entity.Name#>ModifyView", model);
		}
        catch (Exception ex)
        {
			LoggerFactory.CreateLog().Error(string.Format(CultureInfo.InvariantCulture, "Presentation Layer - Modify<#=entity.Name#> Controller ERROR"), ex);
		}

		return RedirectToAction("Find");
    }

	// POST
	[HttpPost]
	[ValidateAntiForgeryToken]
    public ActionResult Modify(<#=entity.Name#>CrudViewModel model)
    {
        LoggerFactory.CreateLog().Debug(string.Format(CultureInfo.InvariantCulture, "Presentation Layer - Modify<#=entity.Name#> Controller Begin"));		

		try
        {
            // Add modify logic here
			if (ModelState.IsValid)
            {
				var committed = _service<#=entity.Name#>.Modify(model.<#=wrapProperty#>, null);					
				if (committed)
				{
					LoggerFactory.CreateLog().Debug(string.Format(CultureInfo.InvariantCulture, "Presentation Layer - Modify<#=entity.Name#> Controller End"));
					return RedirectToAction("Find");
				}
			}
        }
        catch (Exception ex)
        {
			LoggerFactory.CreateLog().Error(string.Format(CultureInfo.InvariantCulture, "Presentation Layer - Modify<#=entity.Name#> Controller ERROR"), ex);
		}

		ModelState.AddModelError("", PresentationResources.Error);
		return View("<#=entity.Name#>ModifyView", new <#=entity.Name#>CrudViewModel(<#=servicesNames.ToString()#>));
    }

	// GET
    public ActionResult Remove(int id)
    {	
		LoggerFactory.CreateLog().Debug(string.Format(CultureInfo.InvariantCulture, "Presentation Layer - Remove<#=entity.Name#> Controller Begin"));		
			
		try
        {
            // Add remove logic here
			var model = new <#=entity.Name#>CrudViewModel(<#=servicesNames.ToString()#>)
				{
				    <#=entity.Name#> = _service<#=entity.Name#>.Get(new List<object> { id }, null)
				};
			
			LoggerFactory.CreateLog().Debug(string.Format(CultureInfo.InvariantCulture, "Presentation Layer - Remove<#=entity.Name#> Controller End"));
			return View("<#=entity.Name#>RemoveView", model);
		}
        catch (Exception ex)
        {
			LoggerFactory.CreateLog().Error(string.Format(CultureInfo.InvariantCulture, "Presentation Layer - Remove<#=entity.Name#> Controller ERROR"), ex);          
        }
			
		return RedirectToAction("Find");
    }

	// POST
	[HttpPost]
	[ValidateAntiForgeryToken]
    public ActionResult Remove(<#=entity.Name#>CrudViewModel model)
    {
        LoggerFactory.CreateLog().Debug(string.Format(CultureInfo.InvariantCulture, "Presentation Layer - Remove<#=entity.Name#> Controller Begin"));
			
		try
        {
            // Add remove logic here
			var committed = _service<#=entity.Name#>.Remove(model.<#=wrapProperty#>, null);
			if (committed)
			{
				LoggerFactory.CreateLog().Debug(string.Format(CultureInfo.InvariantCulture, "Presentation Layer - Remove<#=entity.Name#> Controller End"));
				return RedirectToAction("Find");
			}
        }
        catch (Exception ex)
        {
			LoggerFactory.CreateLog().Error(string.Format(CultureInfo.InvariantCulture, "Presentation Layer - Remove<#=entity.Name#> Controller ERROR"), ex);          
        }

		ModelState.AddModelError("", PresentationResources.Error);
		return View("<#=entity.Name#>RemoveView", new <#=entity.Name#>CrudViewModel(<#=servicesNames.ToString()#>));
    }	

	// GET
    public ActionResult Find(int? page = 1, string sort = "<#=propertyPk.Name#>", string sortDir = "ASC")
    {
		LoggerFactory.CreateLog().Debug(string.Format(CultureInfo.InvariantCulture, "Presentation Layer - Find<#=entity.Name#> Controller Begin"));		
			
		try
        {
            // Add find logic here
			<#=entity.Name#>FindViewModel model;

			if (Request.IsAjaxRequest() && TempData.ContainsKey("Filter<#=entity.Name#>"))
			{
				model = (<#=entity.Name#>FindViewModel)TempData.Peek("Filter<#=entity.Name#>");
				var pagedResult = _service<#=entity.Name#>.FindPagedByFilter(new CustomQuery<<#=entity.Name#>> { SerializedExpression = model.Filter }, null, page != null ? (int)page : model.PageIndex, model.PageSize, new List<string> { sort }, sortDir == "ASC", null);
				model.Paginate(pagedResult, model.Filter);

				LoggerFactory.CreateLog().Debug(string.Format(CultureInfo.InvariantCulture, "Presentation Layer - FindPaged<#=entity.Name#> Controller End"));              
				return PartialView("_<#=entity.Name#>FindPartialView", model);
			}
			else
			{
				TempData.Remove("Filter<#=entity.Name#>");
				model = new <#=entity.Name#>FindViewModel(<#=servicesNames.ToString()#>);
				LoggerFactory.CreateLog().Debug(string.Format(CultureInfo.InvariantCulture, "Presentation Layer - Find<#=entity.Name#> Controller End"));              
				return View("<#=entity.Name#>FindView", model);
			}
        }
        catch (Exception ex)
        {
			LoggerFactory.CreateLog().Error(string.Format(CultureInfo.InvariantCulture, "Presentation Layer - Find<#=entity.Name#> Controller ERROR"), ex);          
        }
			
		return RedirectToAction("Index", "Home");
    }

	// POST
	[HttpPost]
	[ValidateAntiForgeryToken]
    public ActionResult Find(<#=entity.Name#>FindViewModel model)
    {
        LoggerFactory.CreateLog().Debug(string.Format(CultureInfo.InvariantCulture, "Presentation Layer - Find<#=entity.Name#> Controller Begin"));		
			
		try
        {
            // Add find logic here
			if (ModelState.IsValid)
            {
				var expression = GenerateExpression(model);
				var includes = new List<string> { /* More ??? */ };
				var pagedResult = _service<#=entity.Name#>.FindPagedByFilter(expression, includes, 1, model.PageSize, model.OrderBy, model.Ascendent, null);			
				model.Paginate(pagedResult, expression.SerializedExpression);
				
				TempData.Clear();
                TempData.Add("Filter<#=entity.Name#>", model);

				LoggerFactory.CreateLog().Debug(string.Format(CultureInfo.InvariantCulture, "Presentation Layer - Find<#=entity.Name#> Controller End"));
				return PartialView("_<#=entity.Name#>FindPartialView", model);
			}
        }
        catch (Exception ex)
        {
			LoggerFactory.CreateLog().Error(string.Format(CultureInfo.InvariantCulture, "Presentation Layer - Find<#=entity.Name#> Controller ERROR"), ex);           
		}

		ModelState.AddModelError("", PresentationResources.Error);    
		return View("<#=entity.Name#>FindView", new <#=entity.Name#>FindViewModel(<#=servicesNames.ToString()#>));
    }

	#region Private Methods

    private static CustomQuery<<#=entity.Name#>> GenerateExpression(<#=entity.Name#>FindViewModel model)
    {
        Expression<Func<<#=entity.Name#>, bool>> expression = null;	
						
<#
var bTypes = new List<String> { "byte[]", "byte", "Nullable<byte>", "byte?" };
foreach (var edmProperty in simpleProperties)
{
	if (!bTypes.Contains(code.Escape(edmProperty.TypeUsage)))
		if (code.Escape(edmProperty.TypeUsage) == "string")
		{
#>
			if (!string.IsNullOrEmpty(model.<#=entity.Name#>.<#=code.Escape(edmProperty)#>))
				expression = expression.And(d => d.<#=code.Escape(edmProperty)#>.Contains(model.<#=entity.Name#>.<#=code.Escape(edmProperty)#>));
<#
		}
		else
		{
#>
			if (model.<#=entity.Name#>.<#=code.Escape(edmProperty)#>.HasValue)
				expression = expression.And(d => d.<#=code.Escape(edmProperty)#> == model.<#=entity.Name#>.<#=code.Escape(edmProperty)#>.Value);
<#
		}
}
#>

        return new CustomQuery<<#=entity.Name#>>(expression ?? (d => true));
    }

	#endregion

	#region IDisposable Members

    /// <summary>
    /// <see cref="M:System.IDisposable.Dispose"/>
    /// </summary>
	protected override void Dispose(bool disposing)
    {
        if (disposing)
		{
<#
if (serviceLayer == "AppService") {
#>
			_service<#=entity.Name#>.Dispose();
<#
	foreach (var nPropertyTypeName in nPropertyColFk) {
#>
			_service<#=nPropertyTypeName#>.Dispose();
<#
	}
} else if (serviceLayer == "WcfService") {
#>				
			try
            {
				((ICommunicationObject)_service<#=entity.Name#>).Close();
<#
	foreach (var nPropertyTypeName in nPropertyColFk) {
#>
				((ICommunicationObject)_service<#=nPropertyTypeName#>).Close();
<#
	}
#>
            }
            catch
            {
				((ICommunicationObject)_service<#=entity.Name#>).Abort();
<#
	foreach (var nPropertyTypeName in nPropertyColFk) {
#>
				((ICommunicationObject)_service<#=nPropertyTypeName#>).Abort();
<#
	}
#>
			}
<#
}
#>
		}
        base.Dispose(disposing);
    }

    #endregion
}
<#
    EndNamespace(code);
}

fileManager.Process();

#>

<#+
class NpNamesFkComparer : IEqualityComparer<NavigationProperty>
{
    public bool Equals(NavigationProperty x, NavigationProperty y)
    {
        if (Object.ReferenceEquals(x, y)) 
			return true;

        if (Object.ReferenceEquals(x, null) || Object.ReferenceEquals(y, null))
            return false;

        return x.ToEndMember.GetEntityType() == y.ToEndMember.GetEntityType();
    }

    public int GetHashCode(NavigationProperty p)
    {
        if (Object.ReferenceEquals(p, null)) 
			return 0;

        return p.ToEndMember.GetEntityType() == null ? 0 : p.ToEndMember.GetEntityType().GetHashCode();
    }
}

public void WriteHeader(CodeStringGenerator codeStringGenerator, EntityFrameworkTemplateFileManager fileManager)
{
    fileManager.StartHeader();
#>
<#=codeStringGenerator.UsingDirectives(inHeader: true)#>
<#+
    fileManager.EndBlock();
}

public void BeginNamespace(CodeGenerationTools code, EntityType entity, IEnumerable<NavigationProperty> nPropertyColFk, string serviceLayer)
{
    var codeNamespace = code.VsNamespaceSuggestion();
    if (!String.IsNullOrEmpty(codeNamespace))
    {
#>
#region

<#+
if (serviceLayer == "AppService") {
#>
//using Company.Client.Project.Application.BoundedContext.AppServices;
<#+
}
#>
using LightstoneApp.Application.PackageBuilderModule.AppServices;
using LightstoneApp.Application.PackageBuilderModule.Dtos;
using LightstoneApp.Infrastructure.CrossCutting.NetFramework;
using LightstoneApp.Infrastructure.CrossCutting.NetFramework.Logging;
using LightstoneApp.Presentation.Web.Mvc.Client.Resources;
using LightstoneApp.Presentation.Web.Mvc.Client.ViewModels;
<#+
if (serviceLayer == "WcfService") {
#>
using Company.Client.Project.Presentation.ServiceAgents.Proxies.<#=entity.Name#><#=serviceLayer#>;
<#+
foreach (var nPropertyTypeName in nPropertyColFk) {
#>
using Company.Client.Project.Presentation.ServiceAgents.Proxies.<#=nPropertyTypeName#><#=serviceLayer#>;
<#+
	}
}
#>
using AutoMapper;
using Company.Client.Project.Presentation.Web.MVC.Resources;
using Company.Client.Project.Presentation.Web.MVC.ViewModels;
using System.Globalization;
using System.Linq;
using System.Linq.Expressions;
using System.Web.Mvc;
using System.ServiceModel;

#endregion

namespace <#=code.EscapeNamespace(codeNamespace)#>
{
<#+
        PushIndent("    ");
    }
}

public void EndNamespace(CodeGenerationTools code)
{
    if (!String.IsNullOrEmpty(code.VsNamespaceSuggestion()))
    {
        PopIndent();
#>
}
<#+
    }
}

public const string TemplateId = "CSharp_DbContext_Types_EF6";

public class CodeStringGenerator
{
    private readonly CodeGenerationTools _code;
    private readonly TypeMapper _typeMapper;
    private readonly MetadataTools _ef;

    public CodeStringGenerator(CodeGenerationTools code, TypeMapper typeMapper, MetadataTools ef)
    {
        ArgumentNotNull(code, "code");
        ArgumentNotNull(typeMapper, "typeMapper");
        ArgumentNotNull(ef, "ef");

        _code = code;
        _typeMapper = typeMapper;
        _ef = ef;
    }

    public string Property(EdmProperty edmProperty)
    {
        return string.Format(
            CultureInfo.InvariantCulture,
            "{0} {1} {2} {{ {3}get; {4}set; }}",
            Accessibility.ForProperty(edmProperty),
            _typeMapper.GetTypeName(edmProperty.TypeUsage),
            _code.Escape(edmProperty),
            _code.SpaceAfter(Accessibility.ForGetter(edmProperty)),
            _code.SpaceAfter(Accessibility.ForSetter(edmProperty)));
    }

    public string NavigationProperty(NavigationProperty navProp)
    {
        var endType = _typeMapper.GetTypeName(navProp.ToEndMember.GetEntityType());
        return string.Format(
            CultureInfo.InvariantCulture,
            "{0} {1} {2} {{ {3}get; {4}set; }}",
            AccessibilityAndVirtual(Accessibility.ForNavigationProperty(navProp)),
            navProp.ToEndMember.RelationshipMultiplicity == RelationshipMultiplicity.Many ? ("ICollection<" + endType + ">") : endType,
            _code.Escape(navProp),
            _code.SpaceAfter(Accessibility.ForGetter(navProp)),
            _code.SpaceAfter(Accessibility.ForSetter(navProp)));
    }
    
    public string AccessibilityAndVirtual(string accessibility)
    {
        return accessibility + (accessibility != "private" ? " virtual" : "");
    }
    
    public string EntityClassOpening(EntityType entity)
    {
        return string.Format(
            CultureInfo.InvariantCulture,
            "{0} {1}partial class {2}{3}",
            Accessibility.ForType(entity),
            _code.SpaceAfter(_code.AbstractOption(entity)),
            _code.Escape(entity),
            _code.StringBefore(" : ", _typeMapper.GetTypeName(entity.BaseType)));
    }
    
    public string EnumOpening(SimpleType enumType)
    {
        return string.Format(
            CultureInfo.InvariantCulture,
            "{0} enum {1} : {2}",
            Accessibility.ForType(enumType),
            _code.Escape(enumType),
            _code.Escape(_typeMapper.UnderlyingClrType(enumType)));
        }
    
    public void WriteFunctionParameters(EdmFunction edmFunction, Action<string, string, string, string> writeParameter)
    {
        var parameters = FunctionImportParameter.Create(edmFunction.Parameters, _code, _ef);
        foreach (var parameter in parameters.Where(p => p.NeedsLocalVariable))
        {
            var isNotNull = parameter.IsNullableOfT ? parameter.FunctionParameterName + ".HasValue" : parameter.FunctionParameterName + " != null";
            var notNullInit = "new ObjectParameter(\"" + parameter.EsqlParameterName + "\", " + parameter.FunctionParameterName + ")";
            var nullInit = "new ObjectParameter(\"" + parameter.EsqlParameterName + "\", typeof(" + TypeMapper.FixNamespaces(parameter.RawClrTypeName) + "))";
            writeParameter(parameter.LocalVariableName, isNotNull, notNullInit, nullInit);
        }
    }
    
    public string ComposableFunctionMethod(EdmFunction edmFunction, string modelNamespace)
    {
        var parameters = _typeMapper.GetParameters(edmFunction);
        
        return string.Format(
            CultureInfo.InvariantCulture,
            "{0} IQueryable<{1}> {2}({3})",
            AccessibilityAndVirtual(Accessibility.ForMethod(edmFunction)),
            _typeMapper.GetTypeName(_typeMapper.GetReturnType(edmFunction), modelNamespace),
            _code.Escape(edmFunction),
            string.Join(", ", parameters.Select(p => TypeMapper.FixNamespaces(p.FunctionParameterType) + " " + p.FunctionParameterName).ToArray()));
    }
    
    public string ComposableCreateQuery(EdmFunction edmFunction, string modelNamespace)
    {
        var parameters = _typeMapper.GetParameters(edmFunction);
        
        return string.Format(
            CultureInfo.InvariantCulture,
            "return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<{0}>(\"[{1}].[{2}]({3})\"{4});",
            _typeMapper.GetTypeName(_typeMapper.GetReturnType(edmFunction), modelNamespace),
            edmFunction.NamespaceName,
            edmFunction.Name,
            string.Join(", ", parameters.Select(p => "@" + p.EsqlParameterName).ToArray()),
            _code.StringBefore(", ", string.Join(", ", parameters.Select(p => p.ExecuteParameterName).ToArray())));
    }
    
    public string FunctionMethod(EdmFunction edmFunction, string modelNamespace, bool includeMergeOption)
    {
        var parameters = _typeMapper.GetParameters(edmFunction);
        var returnType = _typeMapper.GetReturnType(edmFunction);

        var paramList = String.Join(", ", parameters.Select(p => TypeMapper.FixNamespaces(p.FunctionParameterType) + " " + p.FunctionParameterName).ToArray());
        if (includeMergeOption)
        {
            paramList = _code.StringAfter(paramList, ", ") + "MergeOption mergeOption";
        }

        return string.Format(
            CultureInfo.InvariantCulture,
            "{0} {1} {2}({3})",
            AccessibilityAndVirtual(Accessibility.ForMethod(edmFunction)),
            returnType == null ? "int" : "ObjectResult<" + _typeMapper.GetTypeName(returnType, modelNamespace) + ">",
            _code.Escape(edmFunction),
            paramList);
    }
    
    public string ExecuteFunction(EdmFunction edmFunction, string modelNamespace, bool includeMergeOption)
    {
        var parameters = _typeMapper.GetParameters(edmFunction);
        var returnType = _typeMapper.GetReturnType(edmFunction);

        var callParams = _code.StringBefore(", ", String.Join(", ", parameters.Select(p => p.ExecuteParameterName).ToArray()));
        if (includeMergeOption)
        {
            callParams = ", mergeOption" + callParams;
        }
        
        return string.Format(
            CultureInfo.InvariantCulture,
            "return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction{0}(\"{1}\"{2});",
            returnType == null ? "" : "<" + _typeMapper.GetTypeName(returnType, modelNamespace) + ">",
            edmFunction.Name,
            callParams);
    }
    
    public string DbSet(EntitySet entitySet)
    {
        return string.Format(
            CultureInfo.InvariantCulture,
            "{0} virtual DbSet<{1}> {2} {{ get; set; }}",
            Accessibility.ForReadOnlyProperty(entitySet),
            _typeMapper.GetTypeName(entitySet.ElementType),
            _code.Escape(entitySet));
    }

    public string UsingDirectives(bool inHeader, bool includeCollections = true)
    {
        return inHeader == string.IsNullOrEmpty(_code.VsNamespaceSuggestion())
            ? string.Format(
                CultureInfo.InvariantCulture,
                "{0}using System;{1}" +
                "{2}",
                inHeader ? Environment.NewLine : "",
                includeCollections ? (Environment.NewLine + "using System.Collections.Generic;") : "",
                inHeader ? "" : Environment.NewLine)
            : "";
    }
}

public class TypeMapper
{
    private const string ExternalTypeNameAttributeName = @"http://schemas.microsoft.com/ado/2006/04/codegeneration:ExternalTypeName";

    private readonly System.Collections.IList _errors;
    private readonly CodeGenerationTools _code;
    private readonly MetadataTools _ef;

    public TypeMapper(CodeGenerationTools code, MetadataTools ef, System.Collections.IList errors)
    {
        ArgumentNotNull(code, "code");
        ArgumentNotNull(ef, "ef");
        ArgumentNotNull(errors, "errors");

        _code = code;
        _ef = ef;
        _errors = errors;
    }

    public static string FixNamespaces(string typeName)
    {
        return typeName.Replace("System.Data.Spatial.", "System.Data.Entity.Spatial.");
    }

    public string GetTypeName(TypeUsage typeUsage)
    {
        return typeUsage == null ? null : GetTypeName(typeUsage.EdmType, _ef.IsNullable(typeUsage), modelNamespace: null);
    }

    public string GetTypeName(EdmType edmType)
    {
        return GetTypeName(edmType, isNullable: null, modelNamespace: null);
    }

    public string GetTypeName(TypeUsage typeUsage, string modelNamespace)
    {
        return typeUsage == null ? null : GetTypeName(typeUsage.EdmType, _ef.IsNullable(typeUsage), modelNamespace);
    }

    public string GetTypeName(EdmType edmType, string modelNamespace)
    {
        return GetTypeName(edmType, isNullable: null, modelNamespace: modelNamespace);
    }

    public string GetTypeName(EdmType edmType, bool? isNullable, string modelNamespace)
    {
        if (edmType == null)
        {
            return null;
        }

        var collectionType = edmType as CollectionType;
        if (collectionType != null)
        {
            return String.Format(CultureInfo.InvariantCulture, "ICollection<{0}>", GetTypeName(collectionType.TypeUsage, modelNamespace));
        }

        var typeName = _code.Escape(edmType.MetadataProperties
                                .Where(p => p.Name == ExternalTypeNameAttributeName)
                                .Select(p => (string)p.Value)
                                .FirstOrDefault())
            ?? (modelNamespace != null && edmType.NamespaceName != modelNamespace ?
                _code.CreateFullName(_code.EscapeNamespace(edmType.NamespaceName), _code.Escape(edmType)) :
                _code.Escape(edmType));

        if (edmType is StructuralType)
        {
            return typeName;
        }

        if (edmType is SimpleType)
        {
            var clrType = UnderlyingClrType(edmType);
            if (!IsEnumType(edmType))
            {
                typeName = _code.Escape(clrType);
            }

            typeName = FixNamespaces(typeName);

            return clrType.IsValueType && isNullable == true ?
                String.Format(CultureInfo.InvariantCulture, "Nullable<{0}>", typeName) :
                typeName;
        }

        throw new ArgumentException("edmType");
    }
    
    public Type UnderlyingClrType(EdmType edmType)
    {
        ArgumentNotNull(edmType, "edmType");

        var primitiveType = edmType as PrimitiveType;
        if (primitiveType != null)
        {
            return primitiveType.ClrEquivalentType;
        }

        if (IsEnumType(edmType))
        {
            return GetEnumUnderlyingType(edmType).ClrEquivalentType;
        }

        return typeof(object);
    }
    
    public object GetEnumMemberValue(MetadataItem enumMember)
    {
        ArgumentNotNull(enumMember, "enumMember");
        
        var valueProperty = enumMember.GetType().GetProperty("Value");
        return valueProperty == null ? null : valueProperty.GetValue(enumMember, null);
    }
    
    public string GetEnumMemberName(MetadataItem enumMember)
    {
        ArgumentNotNull(enumMember, "enumMember");
        
        var nameProperty = enumMember.GetType().GetProperty("Name");
        return nameProperty == null ? null : (string)nameProperty.GetValue(enumMember, null);
    }

    public System.Collections.IEnumerable GetEnumMembers(EdmType enumType)
    {
        ArgumentNotNull(enumType, "enumType");

        var membersProperty = enumType.GetType().GetProperty("Members");
        return membersProperty != null 
            ? (System.Collections.IEnumerable)membersProperty.GetValue(enumType, null)
            : Enumerable.Empty<MetadataItem>();
    }
    
    public bool EnumIsFlags(EdmType enumType)
    {
        ArgumentNotNull(enumType, "enumType");
        
        var isFlagsProperty = enumType.GetType().GetProperty("IsFlags");
        return isFlagsProperty != null && (bool)isFlagsProperty.GetValue(enumType, null);
    }

    public bool IsEnumType(GlobalItem edmType)
    {
        ArgumentNotNull(edmType, "edmType");

        return edmType.GetType().Name == "EnumType";
    }

    public PrimitiveType GetEnumUnderlyingType(EdmType enumType)
    {
        ArgumentNotNull(enumType, "enumType");

        return (PrimitiveType)enumType.GetType().GetProperty("UnderlyingType").GetValue(enumType, null);
    }

    public string CreateLiteral(object value)
    {
        if (value == null || value.GetType() != typeof(TimeSpan))
        {
            return _code.CreateLiteral(value);
        }

        return string.Format(CultureInfo.InvariantCulture, "new TimeSpan({0})", ((TimeSpan)value).Ticks);
    }
    
    public bool VerifyCaseInsensitiveTypeUniqueness(IEnumerable<string> types, string sourceFile)
    {
        ArgumentNotNull(types, "types");
        ArgumentNotNull(sourceFile, "sourceFile");
        
        var hash = new HashSet<string>(StringComparer.InvariantCultureIgnoreCase);
        if (types.Any(item => !hash.Add(item)))
        {
            _errors.Add(
                new CompilerError(sourceFile, -1, -1, "6023",
                    String.Format(CultureInfo.CurrentCulture, CodeGenerationTools.GetResourceString("Template_CaseInsensitiveTypeConflict"))));
            return false;
        }
        return true;
    }
    
    public IEnumerable<SimpleType> GetEnumItemsToGenerate(IEnumerable<GlobalItem> itemCollection)
    {
        return GetItemsToGenerate<SimpleType>(itemCollection)
            .Where(e => IsEnumType(e));
    }
    
    public IEnumerable<T> GetItemsToGenerate<T>(IEnumerable<GlobalItem> itemCollection) where T: EdmType
    {
        return itemCollection
            .OfType<T>()
            .Where(i => !i.MetadataProperties.Any(p => p.Name == ExternalTypeNameAttributeName))
            .OrderBy(i => i.Name);
    }

    public IEnumerable<string> GetAllGlobalItems(IEnumerable<GlobalItem> itemCollection)
    {
        return itemCollection
            .Where(i => i is EntityType || i is ComplexType || i is EntityContainer || IsEnumType(i))
            .Select(g => GetGlobalItemName(g));
    }

    public string GetGlobalItemName(GlobalItem item)
    {
        if (item is EdmType)
        {
            return ((EdmType)item).Name;
        }
        else
        {
            return ((EntityContainer)item).Name;
        }
    }

    public IEnumerable<EdmProperty> GetSimpleProperties(EntityType type)
    {
        return type.Properties.Where(p => p.TypeUsage.EdmType is SimpleType && p.DeclaringType == type);
    }
    
    public IEnumerable<EdmProperty> GetSimpleProperties(ComplexType type)
    {
        return type.Properties.Where(p => p.TypeUsage.EdmType is SimpleType && p.DeclaringType == type);
    }
    
    public IEnumerable<EdmProperty> GetComplexProperties(EntityType type)
    {
        return type.Properties.Where(p => p.TypeUsage.EdmType is ComplexType && p.DeclaringType == type);
    }
    
    public IEnumerable<EdmProperty> GetComplexProperties(ComplexType type)
    {
        return type.Properties.Where(p => p.TypeUsage.EdmType is ComplexType && p.DeclaringType == type);
    }

    public IEnumerable<EdmProperty> GetPropertiesWithDefaultValues(EntityType type)
    {
        return type.Properties.Where(p => p.TypeUsage.EdmType is SimpleType && p.DeclaringType == type && p.DefaultValue != null);
    }
    
    public IEnumerable<EdmProperty> GetPropertiesWithDefaultValues(ComplexType type)
    {
        return type.Properties.Where(p => p.TypeUsage.EdmType is SimpleType && p.DeclaringType == type && p.DefaultValue != null);
    }

    public IEnumerable<NavigationProperty> GetNavigationProperties(EntityType type)
    {
        return type.NavigationProperties.Where(np => np.DeclaringType == type);
    }
    
    public IEnumerable<NavigationProperty> GetCollectionNavigationProperties(EntityType type)
    {
        return type.NavigationProperties.Where(np => np.DeclaringType == type && np.ToEndMember.RelationshipMultiplicity == RelationshipMultiplicity.Many);
    }
    
    public FunctionParameter GetReturnParameter(EdmFunction edmFunction)
    {
        ArgumentNotNull(edmFunction, "edmFunction");

        var returnParamsProperty = edmFunction.GetType().GetProperty("ReturnParameters");
        return returnParamsProperty == null
            ? edmFunction.ReturnParameter
            : ((IEnumerable<FunctionParameter>)returnParamsProperty.GetValue(edmFunction, null)).FirstOrDefault();
    }

    public bool IsComposable(EdmFunction edmFunction)
    {
        ArgumentNotNull(edmFunction, "edmFunction");

        var isComposableProperty = edmFunction.GetType().GetProperty("IsComposableAttribute");
        return isComposableProperty != null && (bool)isComposableProperty.GetValue(edmFunction, null);
    }

    public IEnumerable<FunctionImportParameter> GetParameters(EdmFunction edmFunction)
    {
        return FunctionImportParameter.Create(edmFunction.Parameters, _code, _ef);
    }

    public TypeUsage GetReturnType(EdmFunction edmFunction)
    {
        var returnParam = GetReturnParameter(edmFunction);
        return returnParam == null ? null : _ef.GetElementType(returnParam.TypeUsage);
    }
    
    public bool GenerateMergeOptionFunction(EdmFunction edmFunction, bool includeMergeOption)
    {
        var returnType = GetReturnType(edmFunction);
        return !includeMergeOption && returnType != null && returnType.EdmType.BuiltInTypeKind == BuiltInTypeKind.EntityType;
    }
}

public static void ArgumentNotNull<T>(T arg, string name) where T : class
{
    if (arg == null)
    {
        throw new ArgumentNullException(name);
    }
}
#>