@*@using Nancy.ViewEngines.Razor.HtmlHelpers;*@
@using System
@using System.Linq
@using DataPlatform.Shared.Enums
@using UserManagement.Api.Helpers.NancyRazorHelpers
@using UserManagement.Api.ViewModels
@using UserManagement.Domain.Dtos
@using UserManagement.Domain.Entities
@inherits Nancy.ViewEngines.Razor.NancyRazorViewBase<UserManagement.Domain.Dtos.ClientDto>

<div class="box">
    @Html.Partial("Shared/BoxHeader", new HeaderViewModel("Client Info", "", "fa fa-edit", Model))
    <div class="box-body">
        <div class="form-group">
            @*@Html.LabelFor(x => x.Name, new { @class = "control-label col-lg-4" })*@
            <label class="control-label col-lg-4">* Name</label>
            <div class="input-group col-lg-2">
                <span class="input-group-addon glyphicon glyphicon-pencil" id="basic-addon1"></span>
                <div aria-describedby="basic-addon1">
                    @Html.TextBoxFor(x => x.Name, new { @class = "form-control", placeholder = "Client Name" })
                </div>
            </div>
            <div class="col-lg-6">
                @Html.ValidationMessageFor(x => x.Name)
            </div>
        </div>
    </div>
    <div class="form-group">

        <label class="control-label col-lg-4">Client Account Number</label>
        <div class="input-group col-lg-2">
            <span class="input-group-addon glyphicon glyphicon-pencil" id="basic-addon1"></span>
            <div aria-describedby="basic-addon1">
                @Html.TextBoxFor(x => x.ClientAccountNumber, new { @class = "form-control", placeholder = "", @readonly = true })
            </div>
        </div>
        <div class="col-lg-6">
        </div>

    </div>
    <div class="form-group">

        <label class="control-label col-lg-4">* Commercial State</label>
        <div class="input-group col-lg-2">
            <select id="commercialStateSelect" name="CommercialStateId" data-placeholder="Select commercial state" class="chosen-select">
                <option value=""></option>
                @foreach (SelectListItem item in ViewBag.CommercialStates.Value)
                {
                    var isSelected = item.Value == Model.CommercialStateId.ToString();
                    <option selected="@isSelected" value="@item.Value">@item.Text</option>
                }
            </select>
        </div>
        <div class="col-lg-6">
            @Html.ValidationMessageFor(x => x.CommercialStateId)
        </div>

    </div>
    <div class="form-group trial-expiration">

        <label class="control-label col-lg-4">Trial Expiration Date</label>
        <div class="input-group col-lg-2">
            <div class="input-group date">
                <span class="input-group-addon glyphicon glyphicon-calendar" id="basic-addon1"></span>
                <div aria-describedby="basic-addon1">
                    @Html.TextBoxFor(x => x.TrialExpiration, new { @class = "form-control", placeholder = "" })
                </div>
            </div>
        </div>
        <div class="col-lg-6">
            @Html.ValidationMessageFor(x => x.TrialExpiration)
        </div>

    </div>
    <div class="form-group">

        <label class="control-label col-lg-4">Industry Type</label>
        <div class="input-group col-lg-2">
            <select id="industryTypeSelect" name="Industries" data-placeholder="Select industry type" multiple class="chosen-select"></select>
        </div>
        <div class="col-lg-6">
            @*@Html.ValidationMessageFor(x => x.UserTypeId)*@
        </div>
    </div>
    <div class="form-group">

        <label class="control-label col-lg-4">Customers</label>
        <div class="input-group col-lg-2 entity-autocomplete" data-url="/NamedEntities" data-type="@typeof(Customer).AssemblyQualifiedName">
            <select id="CustomerIds" name="CustomerIds" data-placeholder="Type to search & add customers" multiple class="chosen-select">
                @foreach (NamedEntityDto item in Model.Customers)
                {
                    var isSelected = Model.Customers != null && Model.Customers.Select(x => x.Id).Contains(item.Id);
                    <option selected="@isSelected" value="@item.Id">@item.Name</option>
                }
            </select>
        </div>
        <div class="col-lg-6">
            @Html.ValidationMessageFor(x => x.CustomerIds)
        </div>

    </div>

    @Html.Partial("Shared/BoxFooter")
</div>

<script>
    @{
        var selected = Model.Industries != null;
        var url = "http://dev.packagebuilder.api.lightstone.co.za/Industries/" + (selected ? string.Join(",", Model.Industries) : "");        
    }
    $(function () {
	$.get("@url", function (data) {
            var $industrySelect = $("#industryTypeSelect");
            $.each(data, function (index, industry) {
                $("<option>", { value: industry.id, text: industry.name, selected: industry.isSelected }).appendTo($industrySelect);
            });
            $industrySelect.trigger("chosen:updated");
        });
	
        if ($('#commercialStateSelect option:selected').text() == 'TRIAL') {

            $('.trial-expiration').show();
            return;
        }

        $('.trial-expiration').hide();
    });

    $('#commercialStateSelect').on('change', function () {

        if ($('#commercialStateSelect option:selected').text() == 'TRIAL') {

            $('.trial-expiration').show();
            return;
        }

        $('.trial-expiration').hide();
    });
    
    

</script>