@using System
@using System.Linq
@*@using Nancy.ViewEngines.Razor.HtmlHelpers;*@
@using UserManagement.Api.Helpers.NancyRazorHelpers
@using UserManagement.Api.ViewModels
@using UserManagement.Domain.Dtos
@using UserManagement.Domain.Entities
@inherits Nancy.ViewEngines.Razor.NancyRazorViewBase<UserManagement.Domain.Dtos.ContractDto>
@{
    var isCreate = Model.Id == new Guid();
    var pageHeadingViewModel = new HeaderViewModel("Contract detail", isCreate ? "Create a new contract" : "Update existing contract");
    var method = isCreate ? "POST" : "PUT";
    var url = isCreate ? "/Contracts" : "/Contracts/" + Model.Id;
}
@Html.Partial("Shared/PageHeader", pageHeadingViewModel)

@if (isCreate)
{
    <p>* Denotes required fields, please ensure that all required fields are filled in.</p>
}

@Html.ValidationSummary("Validation Results")

<div class="box">
    @Html.Partial("Shared/BoxHeader", new HeaderViewModel("Contract Info", "", "glyphicon glyphicon-eye-open", Model))
    <form action="@url" method="@method" class="form-horizontal">
        
        @Html.HiddenFor(x => x.Created)
        @Html.HiddenFor(x => x.CreatedBy)
        @Html.HiddenFor(x => x.IsActive)

        <div class="box-body">

            <div class="form-group">

                <label class="control-label col-lg-4">* Contract Name</label>
                <div class="input-group col-lg-2">
                    <span class="input-group-addon glyphicon glyphicon-pencil" id="basic-addon1"></span>
                    <div aria-describedby="basic-addon1">
                        @Html.TextBoxFor(x => x.Name, new { @class = "form-control", placeholder = "" })
                    </div>
                </div>
                <div class="col-lg-6">
                    @Html.ValidationMessageFor(x => x.Name)
                </div>

            </div>
            <div class="form-group">

                <label class="control-label col-lg-4">* Description</label>
                <div class="input-group col-lg-2">
                    <span class="input-group-addon glyphicon glyphicon-pencil" id="basic-addon1"></span>
                    <div aria-describedby="basic-addon1">
                        @Html.TextBoxFor(x => x.Description, new { @class = "form-control", placeholder = "" })
                    </div>
                </div>
                <div class="col-lg-6">
                    @Html.ValidationMessageFor(x => x.Description)
                </div>

            </div>
            <div class="form-group">

                <label class="control-label col-lg-4">* Commencement Date</label>
                <div class="input-group col-lg-2">
                    <div class="input-group date">
                        <span class="input-group-addon glyphicon glyphicon-calendar" id="basic-addon1"></span>
                        <input type="text" class="form-control" name="CommencementDate" readonly="true" value="@Model.CommencementDate">
                    </div>
                </div>
                <div class="col-lg-4">
                    @Html.ValidationMessageFor(x => x.CommencementDate)
                </div>

            </div>
            <div class="form-group">

                <label class="control-label col-lg-4">Entered Into By</label>
                <div class="input-group col-lg-2">
                    <span class="input-group-addon glyphicon glyphicon-pencil" id="basic-addon1"></span>
                    <div aria-describedby="basic-addon1">
                        @Html.TextBoxFor(x => x.EnteredIntoBy, new { @class = "form-control", placeholder = "" })
                    </div>
                </div>
                <div class="col-lg-6">
                    @Html.ValidationMessageFor(x => x.EnteredIntoBy)
                </div>

            </div>
            <div class="form-group">

                <label class="control-label col-lg-4">Online Acceptance</label>
                <div class="input-group col-lg-6">
                    <div class="input-group date">
                        <span class="input-group-addon glyphicon glyphicon-calendar" id="basic-addon1"></span>
                        <input type="text" class="form-control" name="OnlineAcceptance" readonly="true" value="@Model.OnlineAcceptance">
                    </div>
                </div>
                <div class="col-lg-6">
                    @Html.ValidationMessageFor(x => x.OnlineAcceptance)
                </div>

            </div>
            <div class="form-group">

                <label class="control-label col-lg-4">Registered Name</label>
                <div class="input-group col-lg-2">
                    <span class="input-group-addon glyphicon glyphicon-pencil" id="basic-addon1"></span>
                    <div aria-describedby="basic-addon1">
                        @Html.TextBoxFor(x => x.RegisteredName, new { @class = "form-control", placeholder = "" })
                    </div>
                </div>
                <div class="col-lg-6">
                    @Html.ValidationMessageFor(x => x.RegisteredName)
                </div>

            </div>
            <div class="form-group">

                <label class="control-label col-lg-4">Registration Number</label>
                <div class="input-group col-lg-2">
                    <span class="input-group-addon glyphicon glyphicon-barcode" id="basic-addon1"></span>
                    <div aria-describedby="basic-addon1">
                        @Html.TextBoxFor(x => x.RegistrationNumber, new { @class = "form-control", placeholder = "" })
                    </div>
                </div>
                <div class="col-lg-6">
                    @Html.ValidationMessageFor(x => x.RegistrationNumber)
                </div>

            </div>
            <div class="form-group">

                <label class="control-label col-lg-4">* Contract Type</label>
                <div class="input-group col-lg-2">
                    <select name="ContractTypeId" data-placeholder="Select user type" class="chosen-select">
                        <option value=""></option>
                        @foreach (SelectListItem item in ViewBag.ContractTypes.Value)
                        {
                            var isSelected = item.Value == Model.ContractTypeId.ToString();
                            <option selected="@isSelected" value="@item.Value">@item.Text</option>
                        }
                    </select>
                </div>
                <div class="col-lg-6">
                    @Html.ValidationMessageFor(x => x.ContractTypeId)
                </div>

            </div>
            <div class="form-group">

                <label class="control-label col-lg-4">* Escalation Type</label>
                <div class="input-group col-lg-2">
                    <select name="EscalationTypeId" data-placeholder="Select escalation type" class="chosen-select">
                        <option value=""></option>
                        @foreach (SelectListItem item in ViewBag.EscalationTypes.Value)
                        {
                            var isSelected = item.Value == Model.EscalationTypeId.ToString();
                            <option selected="@isSelected" value="@item.Value">@item.Text</option>
                        }
                    </select>
                </div>
                <div class="col-lg-6">
                    @Html.ValidationMessageFor(x => x.EscalationTypeId)
                </div>

            </div>
            <div class="form-group">

                <label class="control-label col-lg-4">* Contract Duration</label>
                <div class="input-group col-lg-2">
                    <select name="ContractDurationId" data-placeholder="Select contract duration" class="chosen-select">
                        <option value=""></option>
                        @foreach (SelectListItem item in ViewBag.ContractDurations.Value)
                        {
                            var isSelected = item.Value == Model.ContractDurationId.ToString();
                            <option selected="@isSelected" value="@item.Value">@item.Text</option>
                        }
                    </select>
                </div>
                <div class="col-lg-6">
                    @Html.ValidationMessageFor(x => x.ContractDurationId)
                </div>

            </div>
            <div class="form-group">

                <label class="control-label col-lg-4">Clients</label>
                <div class="input-group col-lg-2 entity-autocomplete" data-url="/NamedEntities" data-type="@typeof(Client).AssemblyQualifiedName">
                    <select id="ClientIds" name="ClientIds" data-placeholder="Type to search & add clients" multiple class="chosen-select">
                        @foreach (NamedEntityDto item in Model.Clients)
                        {
                            var isSelected = Model.Clients != null && Model.Clients.Select(x => x.Id).Contains(item.Id);
                            <option selected="@isSelected" value="@item.Id">@item.Name</option>
                        }
                    </select>
                </div>
                <div class="col-lg-6">
                    @Html.ValidationMessageFor(x => x.ClientIds)
                </div>

            </div>
            <div class="form-group">

                <label class="control-label col-lg-4">Customers</label>
                <div class="input-group col-lg-2 entity-autocomplete" data-url="/NamedEntities" data-type="@typeof(Customer).AssemblyQualifiedName">
                    <select id="CustomerIds" name="CustomerIds" data-placeholder="Type to search & add customers" multiple class="chosen-select">
                        @foreach (NamedEntityDto item in Model.Customers)
                        {
                            var isSelected = Model.Customers != null && Model.Customers.Select(x => x.Id).Contains(item.Id);
                            <option id="@item.Id" selected="@isSelected" value="@item.Id">@item.Name</option>
                        }
                    </select>
                </div>
                <div class="col-lg-6">
                    @Html.ValidationMessageFor(x => x.CustomerIds)
                </div>

            </div>
            <div class="form-group">

                <label class="control-label col-lg-4">Packages</label>
                <div class="input-group col-lg-2 packag-autocomplete">
                    <select id="PackageIdNames" name="PackageIdNames" data-placeholder=" " multiple class="chosen-select">
                        @foreach (var item in Model.Packages)
                        {
                            var isSelected = Model.Packages != null && Model.Packages.Select(x => x.Key).Contains(item.Key);
                            <option id="@item.Key" selected="@isSelected" value="@item.Key|@item.Value">@item.Value</option>
                        }
                    </select>
                </div>
                <div class="col-lg-6">
                    @Html.ValidationMessageFor(x => x.PackageIdNames)
                </div>

            </div>
        </div>
        @Html.Partial("Shared/BoxFooter")
    </form>
</div>
