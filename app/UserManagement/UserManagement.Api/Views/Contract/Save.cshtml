@using System
@using System.Linq
@*@using Nancy.ViewEngines.Razor.HtmlHelpers;*@
@using UserManagement.Api.Helpers.NancyRazorHelpers
@using UserManagement.Api.ViewModels
@using UserManagement.Domain.Dtos
@using UserManagement.Domain.Entities
@using UserManagement.Domain.Enums
@inherits Nancy.ViewEngines.Razor.NancyRazorViewBase<UserManagement.Domain.Dtos.ContractDto>
@{
    var isCreate = Model.Id == new Guid();
    var pageHeadingViewModel = new HeaderViewModel("Contract detail", isCreate ? "Create a new contract" : "Update existing contract");
    var method = isCreate ? "POST" : "PUT";
    var url = isCreate ? "/Contracts" : "/Contracts/" + Model.Id;
}

<style>
    .ac_container input {
        min-width: 88%;
    }

    .ac_result_area {
        position: inherit;
        z-index: 99999;
    }

    .ac_results {
        min-height: 150px;
    }
</style>

<link rel="stylesheet" type="text/css" href="~/Content/bundleDropdown/style1.css" />
<script src="~/Scripts/bundleDropdown/modernizr.custom.63321.js"></script>


@Html.Partial("Shared/PageHeader", pageHeadingViewModel)

@if (isCreate)
{
    <p>* Denotes required fields, please ensure that all required fields are filled in.</p>
}

@Html.ValidationSummary("Validation Results")

<div class="box">
    @Html.Partial("Shared/BoxHeader", new HeaderViewModel("Contract Info", "", "glyphicon glyphicon-eye-open", Model))

    <div class="row">
        <div class="col-md-4">
            <form action="@url" method="@method" class="form-horizontal">
                @Html.HiddenFor(x => x.IsActive)

                @Html.HiddenFor(x => x.AssemblyQualifiedName)

                @Html.HiddenFor(x => x.HasPackagePriceOverride, new { @class = "hasPackagePriceOverride" })
                @Html.HiddenFor(x => x.ContractBundleId, new { @class = "contractBundleId" })
                @Html.HiddenFor(x => x.ContractBundlePrice, new { @class = "contractBundlePrice" })
                @Html.HiddenFor(x => x.ContractBundleTransactionLimit, new { @class = "contractBundleTransactionLimit" })

                <div class="box-body">

                    <div class="form-group">

                        <label class="control-label col-sm-4 col-md-4"><span class="required-field">*</span> Contract Name</label>
                        <div class="input-group col-md-4">
                            <span class="input-group-addon glyphicon glyphicon-pencil" id="basic-addon1"></span>
                            <div aria-describedby="basic-addon1">
                                @Html.TextBoxFor(x => x.Name, new { @class = "form-control", placeholder = "" })
                            </div>
                        </div>
                        <div class="col-md-6">
                            @Html.ValidationMessageFor(x => x.Name)
                        </div>

                    </div>
                    <div class="form-group">

                        <label class="control-label col-sm-4 col-md-4"><span class="required-field">*</span> Description</label>
                        <div class="input-group col-md-4">
                            <span class="input-group-addon glyphicon glyphicon-pencil" id="basic-addon1"></span>
                            <div aria-describedby="basic-addon1">
                                @Html.TextBoxFor(x => x.Description, new { @class = "form-control", placeholder = "" })
                            </div>
                        </div>
                        <div class="col-md-6">
                            @Html.ValidationMessageFor(x => x.Description)
                        </div>

                    </div>
                    <div class="form-group">

                        <label class="control-label col-sm-4 col-md-4"><span class="required-field">*</span> Commencement Date</label>
                        <div class="input-group col-md-4">
                            <div class="input-group date">
                                <span class="input-group-addon glyphicon glyphicon-calendar" id="basic-addon1"></span>
                                <input type="text" class="form-control" name="CommencementDate" readonly="true" value="@Model.CommencementDate">
                            </div>
                        </div>
                        <div class="col-md-4">
                            @Html.ValidationMessageFor(x => x.CommencementDate)
                        </div>

                    </div>
                    <div class="form-group">

                        <label class="control-label col-sm-4 col-md-4"><span class="required-field">*</span> Contract Type</label>
                        <div class="input-group col-md-4">
                            <select name="ContractTypeId" data-placeholder="Select user type" class="chosen-select">
                                <option value=""></option>
                                @foreach (var item in ViewBag.ContractTypes.Value)
                                {
                                    var isSelected = item.Value == Model.ContractTypeId.ToString();
                                    <option selected="@isSelected" value="@item.Value">@item.Text</option>
                                }
                            </select>
                        </div>
                        <div class="col-md-6">
                            @Html.ValidationMessageFor(x => x.ContractTypeId)
                        </div>

                    </div>
                    <div class="form-group">

                        <label class="control-label col-sm-4 col-md-4"><span class="required-field">*</span> Escalation Type</label>
                        <div class="input-group col-md-4">
                            <select name="EscalationType" data-placeholder="Select escalation type" class="chosen-select">
                                <option value=""></option>
                                @foreach (var item in Enum.GetValues(typeof(EscalationType)))
                                {
                                    var isSelected = item.ToString() == Model.EscalationType.ToString();
                                    <option selected="@isSelected" value="@item">@item</option>
                                }
                            </select>
                        </div>
                        <div class="col-md-6">
                            @Html.ValidationMessageFor(x => x.EscalationType)
                        </div>

                    </div>
                    <div class="form-group">

                        <label class="control-label col-sm-4 col-md-4"><span class="required-field">*</span> Contract Duration</label>
                        <div class="input-group col-md-4">
                            <select name="ContractDuration" data-placeholder="Select contract duration" class="chosen-select">
                                <option value=""></option>
                                @foreach (var item in Enum.GetValues(typeof(ContractDuration)))
                                {
                                    var isSelected = item.ToString() == Model.ContractDuration.ToString();
                                    <option selected="@isSelected" value="@item">@item</option>
                                }
                            </select>
                        </div>
                        <div class="col-md-6">
                            @Html.ValidationMessageFor(x => x.ContractDuration)
                        </div>

                    </div>
                    <div class="form-group">

                        <label class="control-label col-sm-4 col-md-4">Entered Into By</label>
                        <div class="input-group col-md-4">
                            <span class="input-group-addon glyphicon glyphicon-pencil" id="basic-addon1"></span>
                            <div aria-describedby="basic-addon1">
                                @Html.TextBoxFor(x => x.EnteredIntoBy, new { @class = "form-control", placeholder = "" })
                            </div>
                        </div>
                        <div class="col-md-6">
                            @Html.ValidationMessageFor(x => x.EnteredIntoBy)
                        </div>

                    </div>
                    <div class="form-group">

                        <label class="control-label col-sm-4 col-md-4">Online Acceptance</label>
                        <div class="input-group col-md-4">
                            <div class="input-group date">
                                <span class="input-group-addon glyphicon glyphicon-calendar" id="basic-addon1"></span>
                                <input type="text" class="form-control" name="OnlineAcceptance" readonly="true" value="@Model.OnlineAcceptance">
                            </div>
                        </div>
                        <div class="col-md-6">
                            @Html.ValidationMessageFor(x => x.OnlineAcceptance)
                        </div>

                    </div>
                    <div class="form-group">

                        <label class="control-label col-sm-4 col-md-4">Registered Name</label>
                        <div class="input-group col-md-4">
                            <span class="input-group-addon glyphicon glyphicon-pencil" id="basic-addon1"></span>
                            <div aria-describedby="basic-addon1">
                                @Html.TextBoxFor(x => x.RegisteredName, new { @class = "form-control", placeholder = "" })
                            </div>
                        </div>
                        <div class="col-md-6">
                            @Html.ValidationMessageFor(x => x.RegisteredName)
                        </div>

                    </div>
                    <div class="form-group">

                        <label class="control-label col-sm-4 col-md-4">Registration Number</label>
                        <div class="input-group col-md-4">
                            <span class="input-group-addon glyphicon glyphicon-barcode" id="basic-addon1"></span>
                            <div aria-describedby="basic-addon1">
                                @Html.TextBoxFor(x => x.RegistrationNumber, new { @class = "form-control", placeholder = "" })
                            </div>
                        </div>
                        <div class="col-md-6">
                            @Html.ValidationMessageFor(x => x.RegistrationNumber)
                        </div>

                    </div>
                    <div class="form-group">
                        <label class="control-label col-sm-4 col-md-4">Industry Type</label>
                        <div class="input-group col-md-4">
                            <select id="industryTypeSelect" name="IndustryType" data-placeholder="Select industry type" multiple class="chosen-select"></select>
                        </div>
                        <div class="col-md-6">
                            @*@Html.ValidationMessageFor(x => x.UserTypeId)*@
                        </div>
                    </div>
                    <div class="form-group">

                        <label class="control-label col-sm-4 col-md-4">Clients</label>
                        <div class="input-group col-md-4 client-autocomplete">
                            <select id="ClientIds" name="ClientIds" data-placeholder="Type to search & add clients" multiple class="chosen-select">
                                @foreach (var item in Model.Clients)
                                {
                                    var isSelected = Model.Clients != null && Model.Clients.Select(x => x.Id).Contains(item.Id);
                                    <option selected="@isSelected" value="@item.Id">@item.Name</option>
                                }
                            </select>
                        </div>
                        <div class="col-md-6">
                            @Html.ValidationMessageFor(x => x.ClientIds)
                        </div>

                    </div>
                    <div class="form-group">

                        <label class="control-label col-sm-4 col-md-4">Customers</label>
                        <div class="input-group col-md-4 customer-autocomplete">
                            <select id="CustomerIds" name="CustomerIds" data-placeholder="Type to search & add customers" multiple class="chosen-select">
                                @foreach (var item in Model.Customers)
                                {
                                    var isSelected = Model.Customers != null && Model.Customers.Select(x => x.Id).Contains(item.Id);
                                    <option id="@item.Id" selected="@isSelected" value="@item.Id">@item.Name</option>
                                }
                            </select>
                        </div>
                        <div class="col-md-6">
                            @Html.ValidationMessageFor(x => x.CustomerIds)
                        </div>

                    </div>
                    <div class="form-group">
                        <label class="control-label col-sm-4 col-md-4">Contract Bundle</label>
                        <div class="input-group col-md-4">
                            <select id="ContractBundle" data-placeholder="Select a contract option" class="chosen-select" onchange="bundleSelect(this.value)">
                                <option value=""></option>
                                @foreach (var bundle in Model.ContractBundleList)
                                {
                                    <option value="@bundle.Id|@bundle.Name|@bundle.TransactionLimit|@bundle.Price">@bundle.Name - @bundle.TransactionLimit tx @@ R @bundle.Price</option>
                                }
                            </select>
                        </div>

                    </div>
                    <div class="form-group">

                        <label class="control-label col-sm-4 col-md-4">Packages</label>
                        <div class="input-group col-md-4 packag-autocomplete">
                            <select id="PackageIdNames" name="PackageIdNames" data-placeholder=" " multiple class="chosen-select">
                                @foreach (var item in Model.Packages)
                                {
                                    var isSelected = Model.Packages != null && Model.Packages.Select(x => x.Key).Contains(item.Key);
                                    <option id="@item.Key" selected="@isSelected" value="@item.Key|@item.Value">@item.Value</option>
                                }
                            </select>
                        </div>
                        <div class="col-md-6">
                            @Html.ValidationMessageFor(x => x.PackageIdNames)
                        </div>

                    </div>
                    <div class="form-group">

                        <label class="control-label col-sm-4 col-md-4"></label>
                        <div id="bundleWarning" class="input-group col-md-4 packag-autocomplete">

                        </div>
                        <div class="col-md-6">

                        </div>

                    </div>

                </div>
                @Html.Partial("Shared/BoxFooter")
            </form>
        </div>

    </div>

</div>

<script type="text/javascript" src="~/Scripts/bundleDropdown/jquery.dropdown.js"></script>

<script type="text/javascript">

    $(document).ready(function () {

        if ($('.hasPackagePriceOverride').val() == 'True') {

            var bundleId = $('.contractBundleId').val();

            $("div[id='bundleId']").each(function () {

                if ($(this)[0].innerHTML == bundleId) {
                    $(this).parent().css('border-color', 'green');
                }
            });

            $('#bundleWarning').html('<p>Please note: This contract has been assigned a bundle pricing scheme.</p>' +
                '<p><a class="btn btn-warning btn-md" onclick="removeBundle()"><i class="icon-ok"></i> Remove Bundled Pricing</a></p>');
        }
    });

    function bundleSelect(bundleElement) {

        var bundleValues = bundleElement.split('|');

        if (bundleValues.length > 0) {
            
            $('.hasPackagePriceOverride').val(true);
            $('.contractBundleId').val(bundleValues[0]);
            $('.contractBundleTransactionLimit').val(bundleValues[2]);
            $('.contractBundlePrice').val(bundleValues[3]);

            $('#bundleWarning').html('<p>Please note: This contract has been assigned a bundle pricing scheme.</p>' +
                '<p><a class="btn btn-warning btn-md" onclick="removeBundle()"><i class="icon-ok"></i> Remove Bundled Pricing</a></p>');
        }
    };

    function removeBundle() {
        $('.hasPackagePriceOverride').val(false);
        $('.contractBundleId').val('');
        $('.contractBundleTransactionLimit').val('');
        $('.contractBundlePrice').val('');
        $('#ContractBundle').val('').trigger('chosen:updated');
        $('#bundleWarning').html('');
    };
</script>