using System;
using System.Collections.Generic;
using Lace.Events;
using Lace.Request;
using Lace.Response;
using Lace.Response.ExternalServices;

namespace Lace.Source.Tests.Data.Initialization
{
    public class MockLaceInitializer : IBootstrap
    {

        //public IList<LaceExternalServiceResponse> LaceResponses { get; private set; }

        //public MockLaceInitializer

        //public void Execute()
        //{
        //    throw new NotImplementedException();
        //}



        //public IList<LaceExternalServiceResponse> LaceResponses { get; set; }
        //private Dictionary<Type, Func<ILaceRequest, ILaceEvent, ILaceResponse>> _handlers;

        //private readonly ILaceRequest _request;
        //private readonly ILaceEvent _laceEvent;
        ////private readonly ILoadRequestSources _loadRequestSources;

        ////public event EventHandler<SetHandlersEventArgs> SetHandlers;
        ////public event EventHandler<LoadEventArgs> Load;

        ////private LaceOperation Bootstrap;


        //public MockLaceInitializer(ILaceRequest request, ILoadRequestSources loadRequestSources, ILaceEvent laceEvent)
        //{
        //    _request = request;
        //    _laceEvent = laceEvent;
        //    _loadRequestSources = loadRequestSources;

          
        //}

        //private void Set()
        //{
        //    Bootstrap = new LaceOperation(_loadRequestSources)
        //    {
        //        LaceBootstrap = this
        //    };
        //}

        //private void InitializeHandlers()
        //{
        //    var args = new SetHandlersEventArgs();
        //    SetHandlers(this, args);
        //    _handlers = args.Handlers ?? new Dictionary<Type, Func<ILaceRequest, ILaceEvent, ILaceResponse>>();
        //}

        //private void LoadSources()
        //{
        //    var args = new LoadEventArgs(_request, _handlers, _laceEvent);
        //    Load(this, args);
        //    LaceResponses = args.LaceResponses;
        //}
       
    }
}
