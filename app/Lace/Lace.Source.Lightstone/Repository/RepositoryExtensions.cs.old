using System;
using System.Collections.Generic;
using System.Data;
using System.Linq.Expressions;
using DapperExtensions;

namespace Lace.Source.Lightstone.Repository
{
    public static class RepositoryExtensions
    {
        public static IEnumerable<T> Find<T>(this IDbConnection connection, Expression<Func<T, object>> expression,
            object value) where T : class
        {
            var binaryExpression = (BinaryExpression) ((UnaryExpression) expression.Body).Operand;

            using (connection)
            {
                connection.Open();
                var predicate = Predicates.Field<T>(expression, IsOperator(binaryExpression), value);
                return connection.GetList<T>(predicate);
            }
        }

        public static IEnumerable<dynamic> Query(this IDbConnection connection, string sql, dynamic param = null, IDbTransaction transaction = null, bool buffered = true, int? commandTimeout = null, CommandType? commandType = null)
        {
            return Query<DapperRow>(connection, sql, param as object, transaction, buffered, commandTimeout, commandType);
        }

        private static Operator IsOperator(Expression binaryExpression)
        {
            switch (binaryExpression.NodeType)
            {
                case ExpressionType.Equal:
                    return Operator.Eq;
                case ExpressionType.GreaterThan:
                    return Operator.Gt;
                case ExpressionType.GreaterThanOrEqual:
                    return Operator.Ge;
                case ExpressionType.LessThan:
                    return Operator.Lt;
                case ExpressionType.LessThanOrEqual:
                    return Operator.Le;
                default:
                    return Operator.Eq;
            }
        }
    }
}
