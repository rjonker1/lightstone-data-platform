using System;
using System.Collections.Generic;
using System.Linq;
using System.Net.Http;
using System.Text;
using System.Web.Http;
using CsQuery.Utility;
using Nancy.Bootstrapper;

namespace Lim.Tests.Api
{
    public class Browser
    {
        private HttpServer _server;

        public Browser()
        {
            var config = new HttpConfiguration();
            config.Routes.MapHttpRoute(name: "Default", routeTemplate: "api/",
                defaults: new {id = RouteParameter.Optional});
             config.IncludeErrorDetailPolicy = IncludeErrorDetailPolicy.Always;
            _server = new HttpServer(config);
        }

        public HttpResponseMessage Get(string path, Action browserContext = null)
        {
            return this.HandleRequest(HttpMethod.Get, path, browserContext);
        }

        private HttpResponseMessage HandleRequest(HttpMethod method, string path, Action browserContext)
        {
            var request = CreateRequest(method, path, browserContext ?? this.DefaultBrowserContext);

            if (BrowserHttpClient == null)
                BrowserHttpClient = new HttpClient(_server);

            HttpResponseMessage response = BrowserHttpClient.SendAsync(request).Result;

            request.Dispose();

            if (_server != null)
            {
                _server.Dispose();
            }

            return response;
        }
    }

    public async Task OwinTest()
        {
            // Arrange
            var httpClient = CreateHttpClient(with => with.Module<ConfigBootTestModule>());
 
            // Act
            var response = await httpClient.GetAsync("http://localhost/config");
            var body = await response.Content.ReadAsStringAsync();
 
            // Assert
            Assert.Equal("Hello configured fellow", body);
        }
 
        private static HttpClient CreateHttpClient(Action<ConfigurableBootstrapper.ConfigurableBootstrapperConfigurator> configureBootstrapperAction)
        {
            return TestServer.Create(builder => 
                new Startup(new ConfigurableBootstrapper(configureBootstrapperAction)).Configuration(builder))
                .CreateHttpClient();
        }
 
        private class Startup
        {
            private readonly INancyBootstrapper _nancyBootstrapper;
 
            public Startup(INancyBootstrapper nancyBootstrapper)
            {
                _nancyBootstrapper = nancyBootstrapper;
            }
 
            public void Configuration(IAppBuilder builder)
            {
                builder.UseNancy(_nancyBootstrapper);
            }
        }
}
