using System;
using System.Linq;
using Lim.Dtos;
using Nancy;
using Nancy.ModelBinding;

namespace Lim.Web.UI.Helpers
{
    //http://stackoverflow.com/questions/11649385/nancy-model-binding-to-child-class
    public class CustomModelBinder : IModelBinder
    {
        public object Bind(NancyContext context, Type modelType, object instance, BindingConfig configuration, params string[] blackList)
        {
            var parentObject = Activator.CreateInstance(modelType);

            foreach (var key in context.Request.Form)
            {
                var value = context.Request.Form[key];
                this.SetObjectValue(parentObject, modelType, key, value);
            }

            return parentObject;
        }

        private void SetObjectValue(object instance, Type type, string key, string propertyValue)
        {
            if (key.Contains("."))
            {
                this.SetObjectValueDeep(instance, type, key, propertyValue);
            }

            var propertyInfo = type.GetProperty(key);
            if (propertyInfo == null)
            {
                return;
            }

            if (propertyInfo.PropertyType == typeof (Guid))
            {
                var @guid = Guid.Empty;
                Guid.TryParse(propertyValue, out @guid);
                propertyInfo.SetValue(instance, Convert.ChangeType(@guid, propertyInfo.PropertyType), null);
                return;
            }

            if (propertyInfo.PropertyType == typeof (bool))
            {
                var @bool = false;
                bool.TryParse(propertyValue, out @bool);
                propertyInfo.SetValue(instance, Convert.ChangeType(@bool, propertyInfo.PropertyType), null);
                return;
            }

            propertyInfo.SetValue(instance, Convert.ChangeType(propertyValue, propertyInfo.PropertyType), null);
        }

        private void SetObjectValueDeep(object instance, Type type, string key, string propertyValue)
        {
            var propList = key.Split('.').ToList();

            var propertyInfo = type.GetProperty(propList.First());
            if (propertyInfo == null)
            {
                return;
            }

            var childObject = propertyInfo.GetValue(instance, null);

            if (childObject == null)
            {
                childObject = Activator.CreateInstance(propertyInfo.PropertyType);
                propertyInfo.SetValue(instance, childObject, null);
            }

            propList.RemoveAt(0);

            var newKey = propList.Aggregate(string.Empty, (current, prop) => current + (prop + ".")).TrimEnd('.');

            if (newKey.Contains("."))
            {
                this.SetObjectValueDeep(childObject, childObject.GetType(), newKey, propertyValue);
            }
            else
            {
                this.SetObjectValue(childObject, childObject.GetType(), newKey, propertyValue);
            }
        }

        public bool CanBind(Type modelType)
        {
            return modelType == typeof(DatabaseExtractDto);
        }



      
    }
}