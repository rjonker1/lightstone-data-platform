@using System.Linq
@inherits Nancy.ViewEngines.Razor.NancyRazorViewBase<Lim.Web.UI.Models.Api.PushConfiguration>
@{
    Layout = "_Layout.cshtml";
}
<body class="skin-blue">
    <div class="wrapper">
        @Html.Partial("_Header.cshtml")
        @Html.Partial("_Sidebar.cshtml")

        <!-- Content Wrapper. Contains page content -->
        <div class="content-wrapper">
            <!-- Content Header (Page header) -->
            <section class="content-header">
                <h1>
                    LIM
                    <small>API Push</small>
                </h1>
            </section>
            <!-- Main content -->
            <section class="content">
                <div class="row">
                    <div class="box box-warning">
                        <div class="box-header">
                            <h3 class="box-title">Push Configuration</h3>
                        </div><!-- /.box-header -->
                        <div class="box-body" >
                            <form role="form" action="/integrations/for/api/push/save" method="post">
                                <input type="hidden" name="Id" value="@Model.Id"/>
                                <div class="form-group">
                                    <div class="checkbox">
                                        <label> 
                                            <input name="IsActive" id="IsActive" checked="@Model.IsActive" value="@Model.IsActive" type="checkbox" />
                                            Is Active
                                        </label>
                                    </div>
                                </div>
                                <div class="form-group">
                                    <label>LIM Client</label>
                                    <select id="ClientId" name="ClientId" data-placeholder="Select LIM Client ..." class="chosen-select form-control">
                                        <option value=""></option>
                                        @foreach (var client in Model.SelectableIntegrationClients)
                                        {
                                            var isSelected = Model.SelectableIntegrationClients.Select(x => x.Id).Contains(Model.ClientId);
                                            <option id="@client.Id" name="@client.Id" selected="@isSelected" value="@client.Id">@client.Name</option>
                                        }
                                    </select>
                                </div>
                                <div class="form-group">
                                    <label>Clients / Customers</label>
                                    <select id="IntegrationClients" name="IntegrationClients" data-placeholder="Select Integration Clients ..." class="chosen-select form-control" multiple>
                                        <option value=""></option>
                                        @foreach (var client in Model.SelectableDataPlatformClients)
                                        {
                                            var isSelected = Model.IntegrationClients != null && Model.IntegrationClients.Contains(client.Id);
                                            <option id="@client.Id" name="@client.Id" selected="@isSelected" value="@client.Id">@client.Name</option>
                                        }
                                    </select>
                                </div>
                                <div class="form-group">
                                    <label>Contracts</label>
                                    <select id="IntegrationContracts" name="IntegrationContracts" data-placeholder="Select Contract ..." class="chosen-select form-control" multiple>
                                        <option value=""></option>
                                        @foreach (var contract in Model.SelectableDataPlatformContracts)
                                        {
                                            var isSelected = Model.IntegrationContracts != null && Model.IntegrationContracts.Contains(contract.Id);
                                            <option id="@contract.Id" name="@contract.Id" selected="@isSelected" value="@contract.Id">@contract.Name</option>
                                        }
                                    </select>
                                </div>
                                <div class="form-group">
                                    <label>Packages / Products</label>
                                    <select id="IntegrationPackages" name="IntegrationPackages" data-placeholder="Select Packages ..." class="chosen-select form-control" multiple>
                                        <option value=""></option>
                                        @foreach (var package in Model.SelectableDataPlatformPackages)
                                        {
                                            var isSelected = Model.IntegrationPackages != null && Model.IntegrationPackages.Contains(package.Id);
                                            <option id="@package.Id" selected="@isSelected" value="@package.Id">@package.Name</option>
                                        }
                                    </select>
                                </div>
                                <div class="form-group">
                                    <label>Base Address</label>
                                    <input type="text" name="BaseAddress" class="form-control" value="@Model.BaseAddress" placeholder="http://..." />
                                </div>
                                <div class="form-group">
                                    <label>Suffix</label>
                                    <input type="text" name="Suffix" class="form-control" value="@Model.Suffix" placeholder="api/pushroute" />
                                </div>
                                <div class="form-group">
                                    <div class="checkbox">
                                        <label>
                                            <input id="HasAuthentication" checked="@Model.HasAuthentication" name="HasAuthentication" type="checkbox" value="@Model.HasAuthentication" />
                                            Has Authentication
                                        </label>
                                    </div>
                                </div>
                                <div class="section-authentication">
                                    <div class="form-group">
                                        <label>Authentication Types</label>
                                        <select id="authentication-type" name="AuthenticationType" class="chosen-select form-control">
                                            @foreach (var type in Model.Authentication)
                                        {
                                            var isSelected = type.Id == Model.AuthenticationType;
                                                <option id="@type.Id" selected="@isSelected" value="@type.Id">@type.Name</option>
                                        }
                                        </select>
                                    </div>
                                    <div class="form-group">
                                        <label>Authentication Key</label>
                                        <input type="text" name="AuthenticationKey" class="form-control" value="@Model.AuthenticationKey" />
                                    </div>
                                    <div class="form-group">
                                        <label>Authentication Key Token</label>
                                        <input type="text" name="AuthenticationToken" class="form-control" value="@Model.AuthenticationToken" />
                                    </div>
                                    <div class="form-group">
                                        <label>Username</label>
                                        <input type="text" name="Username" class="form-control" value="@Model.Username" />
                                    </div>
                                    <div class="form-group">
                                        <label>Password</label>
                                        <input type="text" name="Password" class="form-control" value="@Model.Password" />
                                    </div>
                                </div>
                                <div class="form-group">
                                    <label>Frequency</label>
                                    <select id="frequencyType" name="FrequencyType" class="chosen-select form-control">
                                        @foreach (var type in Model.Frequency)
                                        {
                                            var isSelected = type.Id == @Model.FrequencyType;
                                            <option id="@type.Id" data-name="@type.Name" selected="@isSelected" value="@type.Id">@type.Name</option>
                                        }
                                    </select>
                                </div>
                                <div id="custom-time-picker">
                                    <div class="bootstrap-timepicker">
                                        <div class="form-group">
                                            <label>Custom Frequency</label>
                                            <div class="input-group bootstrap-timepicker">
                                                <input id="frequencytime" name="CustomFrequency" value="@Model.CustomFrequency.TimeOfDay" type="text" class="form-control " />
                                                <div class="input-group-addon">
                                                    <i class="fa fa-clock-o"></i>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label>Custom Day</label>
                                        <select id="customDay" name="CustomDay" class="chosen-select form-control">
                                            @foreach (var day in Model.Weekdays)
                                            {
                                                var isSelected = day.Day == @Model.CustomDay;
                                                <option id="@day.Id" data-name="@day.Day" selected="@isSelected" value="@day.Day">@day.Day</option>
                                            }
                                        </select>
                                    </div>

                                </div>
                                <div class="box-footer">
                                    <button type="submit" class="btn btn-primary">Save</button>
                                </div>
                            </form>
                        </div><!-- /.box-body -->
                    </div>
                </div>
            </section><!-- /.content -->
        </div><!-- /.content-wrapper -->
        @Html.Partial("_Footer.cshtml")
    </div>
    <script src="~/assets/jquery/jquery-1.10.2.min.js"></script>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.4/js/bootstrap.min.js"></script>
    <script src="~/assets/plugins/input-mask/jquery.inputmask.js" type="text/javascript"></script>
    <script src="~/assets/plugins/input-mask/jquery.inputmask.date.extensions.js" type="text/javascript"></script>
    <script src="~/assets/plugins/input-mask/jquery.inputmask.extensions.js" type="text/javascript"></script>
    <script src="~/assets/plugins/daterangepicker/daterangepicker.js" type="text/javascript"></script>
    <script src="~/assets/plugins/timepicker/bootstrap-timepicker.min.js" type="text/javascript"></script>
    <script src="~/assets/plugins/chosen/chosen.jquery.min.js" type="text/javascript"></script>
    <script src="~/assets/js/app.min.js" type="text/javascript"></script>

    <script type="text/javascript">
        $(function() {
            //$('#frequencytime').daterangepicker({ timePicker: true, timePickerIncrement: 30, format: 'MM/DD/YYYY h:mm A' });
            $('#frequencytime').timepicker();
            var config = {
                '.chosen-select': {},
                '.chosen-select-deselect': { allow_single_deselect: true },
                '.chosen-select-no-single': { disable_search_threshold: 10 },
                '.chosen-select-no-results': { no_results_text: 'Value does not exist in the list' },
                '.chosen-select-width': { width: "95%" }
            };
            for (var selector in config) {
                $(selector).chosen(config[selector]);
            }
            
            if ($('#HasAuthentication').is(':checked')) {
                $('.section-authentication').fadeIn('slow');
            } else {
                $('.section-authentication').fadeOut('slow');
            }
            
            if ($('#frequencyType').find(':selected').data('name') == 'Custom') {
                $('#custom-time-picker').fadeIn('slow');
            } else {
                $('#custom-time-picker').fadeOut('slow');
            }

            $('#HasAuthentication').change(function() {
                if (this.checked) {
                    $('.section-authentication').fadeIn('slow');
                } else {
                    $('.section-authentication').fadeOut('slow');
                }
            });

            $('#frequencyType').change(function() {
                var name = $(this).find(':selected').data('name');
                if (name == 'Custom') {
                    $('#custom-time-picker').fadeIn('slow');
                } else {
                    $('#custom-time-picker').fadeOut('slow');
                }

            });
        })
    </script>
</body>